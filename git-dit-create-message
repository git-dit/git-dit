#!/usr/bin/env bash
#
#   git-dit - the distributed issue tracker for git
#   Copyright (C) 2016 Matthias Beyer <mail@beyermatthias.de>
#   Copyright (C) 2016 Julian Ganz <neither@nut.email>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License version 2 as
#   published by the Free Software Foundation.
#
# -----
#
# $(basename $0) <parent-hash> <tree-init-hash>
#
#   <parent-hash>       Create a comment on this comment
#   <tree-init-hash>    The hash of the initial commit in this issue tree
#
# If <parent-hash> and <tree-init-hash> are not provided, we create a new issue.
#
# If <parent-hash> is provided and <tree-init-hash> is not, we create a new
# issue which is attached to an existing commit. That can be used (for example)
# to attach a bug report to a commit.
#
# If both are provided, we create a reply to an existing issue discussion.
#
# Additional arguments are ignored
#
# Returns (prints) the hash of the new commit
#
# (c) 2016 Matthias Beyer, Julian Ganz

SUBDIRECTORY_OK=1
USAGE="[options] [parent...]"
LONG_USAGE="  [parents...]   Parents of the newly created message
    Options:
        -h          Display this message
        -i <issue>  Tree init hash under which to register the new message

Create a new message. The parents provided will be the parents of the new
message. If no issue hash is supplied, the new message will be the initial
message of a new issue. Otherwise, the message will be associated with the
issue hash.
For the new message, the tree from the first parent supplied will be used.
An appropriate reference will be created for the new message.

Supplying an issue hash but no parent is considered an error.

Returns (prints) the hash of the new commit"

. "$(git --exec-path)/git-sh-setup"

TREE_INIT_HASH=""

while getopts "hi:" opt
do
  case $opt in

    h)
        usage
        exit 0
        ;;

    i)
        TREE_INIT_HASH="$OPTARG"
        ;;

    *)
        echo -e "\n  Option does not exist : $OPTARG\n"
        usage
        exit 1
        ;;

  esac
done
shift $(($OPTIND-1))

PARENT=("$@")

#
# IN: commit hash or symbolic ref
# OUT: nothing
# ERR: Kills running program if hash does not exist
#
commit_exists_or_abort() {
    git rev-parse --quiet --verify $1^{commit} 2>/dev/null >/dev/null || \
        die "Not a commit: $1"
}

#
# Update the HEAD of the issue to $1 or die if it fails
#
create_new_head() {
    git update-ref refs/dit/$1/head $1
    [[ ! $? ]] && die "Failed to update reference: $1"
}

# If there are no parents
if [[ "${#PARENT[@]}" -eq 0 ]]; then
    # If there is no TREE_INIT_HASH, die
    [[ -n "$TREE_INIT_HASH" ]] && \
        die "Parent required when an issue hash is supplied"

    empty_tree=$(git hash-object -t tree /dev/null)
    [[ ! $? ]] && die "Failed to get hash of empty tree"

    # Create new detached issue thread
    new_commit_hash=$(git commit-tree "$empty_tree")
    [[ ! $? ]] && die "Failed to commit tree with message"

    create_new_head "$new_commit_hash"

else
    # Check whether each parent exists, construct argument list
    args=()
    for parent in "${PARENT[@]}"; do
        commit_exists_or_abort "$parent"
        args+=('-p' "$parent")
    done

    new_commit_hash=$(git commit-tree "${args[@]}" "${PARENT[0]}:")
    [[ ! $? ]] && die "Failed to commit tree with message"

    if [[ -z "$TREE_INIT_HASH" ]];
    then
        # New attached issue thread
        create_new_head "$new_commit_hash"

    else
        # Reply
        git update-ref refs/dit/$TREE_INIT_HASH/leaves/$new_commit_hash $new_commit_hash
        [[ ! $? ]] && die "Failed to update reference: $new_commit_hash"

    fi

fi

echo "$new_commit_hash"

