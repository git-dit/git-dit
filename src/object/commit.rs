// git-dit - the distributed issue tracker for git
// Copyright (C) 2025 Julian Ganz <neither@nut.email>
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//! Commit related facilities

use super::Database;
use crate::base::Base;
use crate::error;

/// A git commit
pub trait Commit {
    /// Type used for representing Object IDs
    type Oid;

    /// Type used for git signatures
    type Signature<'s>
    where
        Self: 's;

    /// Retrieve the commit id
    fn id(&self) -> Self::Oid;

    /// Retrieve the author of the commit
    fn author(&self) -> Self::Signature<'_>;

    /// Retrieve the commit of the commit
    fn committer(&self) -> Self::Signature<'_>;

    /// Retrieve the full commit message
    ///
    /// The full commit message includes the subject, body and trailers.
    fn message(&self) -> Result<&str, std::str::Utf8Error>;

    /// Retrieve the ids of this commit's parents
    fn parent_ids(&self) -> impl IntoIterator<Item = Self::Oid> + '_;

    /// Retrieve this commit's tree's id
    fn tree_id(&self) -> Self::Oid;
}

impl Commit for git2::Commit<'_> {
    type Oid = git2::Oid;

    type Signature<'s>
        = git2::Signature<'s>
    where
        Self: 's;

    fn id(&self) -> Self::Oid {
        git2::Commit::id(self)
    }

    fn author(&self) -> Self::Signature<'_> {
        git2::Commit::author(self)
    }

    fn committer(&self) -> Self::Signature<'_> {
        git2::Commit::committer(self)
    }

    fn message(&self) -> Result<&str, std::str::Utf8Error> {
        std::str::from_utf8(git2::Commit::message_bytes(self))
    }

    fn parent_ids(&self) -> impl IntoIterator<Item = Self::Oid> + '_ {
        git2::Commit::parent_ids(self)
    }

    fn tree_id(&self) -> Self::Oid {
        git2::Commit::tree_id(self)
    }
}

/// A builder for commits
pub struct Builder<'r, 'c, R, F>
where
    R: Database<'r> + 'c,
    F: FollowUp<R>,
    R::Commit: 'c,
{
    database: &'r R,
    author: R::Signature<'c>,
    committer: R::Signature<'c>,
    tree: R::Tree,
    parents: Vec<R::Commit>,
    follow_up: F,
}

impl<'r, 'c, R, F> Builder<'r, 'c, R, F>
where
    R: Database<'r> + 'c,
    F: FollowUp<R>,
    R::Commit: 'c,
{
    /// Create a new [Builder]
    pub(super) fn new(
        database: &'r R,
        author: R::Signature<'c>,
        committer: R::Signature<'c>,
        tree: R::Tree,
        follow_up: F,
    ) -> Self {
        Self {
            database,
            author,
            committer,
            tree,
            parents: Default::default(),
            follow_up,
        }
    }

    /// Set an author for the commit
    pub fn with_author(self, author: R::Signature<'c>) -> Self {
        Self { author, ..self }
    }

    /// Set a committer for the commit
    pub fn with_committer(self, committer: R::Signature<'c>) -> Self {
        Self { committer, ..self }
    }

    /// Set a tree for the commit
    pub fn with_tree(self, tree: R::Tree) -> Self {
        Self { tree, ..self }
    }

    /// Set the parents for the commit
    pub fn with_parents(mut self, parents: impl IntoIterator<Item = R::Commit>) -> Self {
        self.parents.extend(parents);
        self
    }

    /// Build a [Commit] with a commit message
    pub fn build(self, message: &str) -> error::Result<F::Output, R::InnerError> {
        let parents: Vec<_> = self.parents.iter().collect();
        self.database
            .commit(
                &self.author,
                &self.committer,
                message,
                &self.tree,
                parents.as_ref(),
            )
            .and_then(|o| self.follow_up.follow_up(self.database, o))
    }
}

/// Follow up action to perform after committing
pub trait FollowUp<R: Base> {
    /// Output generated by the action
    type Output;

    /// Perform the action
    fn follow_up(self, database: &R, commit: R::Oid) -> error::Result<Self::Output, R::InnerError>;
}

impl<R: Base, F: FnOnce(&R, R::Oid) -> error::Result<O, R::InnerError>, O> FollowUp<R> for F {
    type Output = O;

    fn follow_up(self, database: &R, commit: R::Oid) -> error::Result<Self::Output, R::InnerError> {
        self(database, commit)
    }
}
