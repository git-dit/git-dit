// git-dit - the distributed issue tracker for git
// Copyright (C) 2016, 2017 Matthias Beyer <mail@beyermatthias.de>
// Copyright (C) 2016, 2017 Julian Ganz <neither@nut.email>
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

use std::fmt;
use std::str::Utf8Error;

/// Alias for wrapping git library specific [Error](std::error::Error)s
pub type Result<T, I> = std::result::Result<T, Error<I>>;


/// Extension trait for convenience functionality
pub(crate) trait ResultExt<T, I: Into<Inner<E>>, E: InnerError> {
    /// Wrap an error with a specific [Kind]
    fn wrap_with_kind(self, kind: Kind<E>) -> Result<T, E>;

    /// Wrap an error with a specific [Kind] generated by a fn
    ///
    /// `kind` is only called in the error case.
    fn wrap_with<F: FnOnce() -> Kind<E>>(self, kind: F) -> Result<T, E>;
}

impl<T, I, E> ResultExt<T, I, E> for std::result::Result<T, I>
where
    I: Into<Inner<E>>,
    E: InnerError,
{
    fn wrap_with_kind(self, kind: Kind<E>) -> Result<T, E> {
        self.wrap_with(|| kind)
    }

    fn wrap_with<F: FnOnce() -> Kind<E>>(self, kind: F) -> Result<T, E> {
        self.map_err(|e| Error::from(kind()).with_inner(e))
    }
}


/// Custom [Error](std::error::Error) type for this library
#[derive(Clone, Debug)]
pub struct Error<I: InnerError> {
    inner: Option<Inner<I>>,
    kind: Kind<I>,
}

impl<I: InnerError> Error<I> {
    /// Set an [Inner] error
    fn with_inner(self, inner: impl Into<Inner<I>>) -> Self {
        Self {
            inner: Some(inner.into()),
            ..self
        }
    }

    /// Transform into a new error with a different [Kind]
    pub fn with_kind(self, kind: Kind<I>) -> Self {
        Self { kind, ..self }
    }

    /// Retrieve the [Kind] of error
    pub fn kind(&self) -> &Kind<I> {
        &self.kind
    }
}

impl<I: InnerError> From<Kind<I>> for Error<I> {
    fn from(kind: Kind<I>) -> Self {
        Self {inner: None, kind}
    }
}

impl<I: InnerError + 'static> std::error::Error for Error<I> {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        self.inner.as_ref().map(Inner::as_dyn)
    }
}

impl<I: InnerError> fmt::Display for Error<I> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        self.kind.fmt(f)
    }
}

/// Encapsulation of inner errors for [Error]
#[derive(Clone, Debug)]
pub(crate) enum Inner<I> {
    Error(I),
    Utf8(Utf8Error),
    Format(fmt::Error),
}

impl<I: InnerError> From<I> for Inner<I> {
    fn from(err: I) -> Self {
        Self::Error(err)
    }
}

impl<I> From<Utf8Error> for Inner<I> {
    fn from(err: Utf8Error) -> Self {
        Self::Utf8(err)
    }
}

impl<I> From<fmt::Error> for Inner<I> {
    fn from(err: fmt::Error) -> Self {
        Self::Format(err)
    }
}

impl<I: std::error::Error + 'static> Inner<I> {
    /// Retrieve the inner error as a trait object
    fn as_dyn(&self) -> &(dyn std::error::Error + 'static) {
        match self {
            Self::Error(i) => i,
            Self::Utf8(i) => i,
            Self::Format(i) => i,
        }
    }
}

/// Kinds of errors which may be emitted by this library
#[derive(Clone, Debug)]
pub enum Kind<I: InnerError> {
    CannotCreateMessage,
    CannotConstructRevwalk,
    CannotGetCommit,
    CannotGetCommitForRev(String),
    ReferenceNameError,
    CannotGetReferences(String),
    CannotGetReference,
    CannotDeleteReference(I::RefName),
    CannotGetRemotes,
    CannotBuildTree,
    CannotFindIssueHead(I::Oid),
    CannotSetReference(String),
    NoTreeInitFound(I::Oid),
    OidFormatError(String),
    MalFormedHeadReference(I::RefName),
    TrailerFormatError(String),
    MalformedMessage,
}

impl<I: InnerError> Kind<I> {
    /// Wrap this [Kind] into an [Error] with the given inner error
    pub(crate) fn wrap(self, err: impl Into<Inner<I>>) -> Error<I> {
        Error::from(self).with_inner(err.into())
    }
}

impl<I: InnerError> fmt::Display for Kind<I> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::CannotCreateMessage => write!(f, "cannot create a message"),
            Self::CannotConstructRevwalk => write!(f, "cannot construct a revision walk"),
            Self::CannotGetCommit => write!(f, "cannot get a specific commit from repository"),
            Self::CannotGetCommitForRev(r) => write!(f, "cannot get commit from rev '{r}'"),
            Self::ReferenceNameError => write!(f, "error getting reference name"),
            Self::CannotGetReferences(g) => {
                write!(f, "cannot get references '{g}' from repository")
            }
            Self::CannotGetReference => {
                write!(f, "cannot get a specific reference from repository")
            }
            Self::CannotDeleteReference(r) => write!(f, "cannot delete the reference '{r}'"),
            Self::CannotGetRemotes => write!(f, "cannot get remotes"),
            Self::CannotBuildTree => write!(f, "cannot build Tree"),
            Self::CannotFindIssueHead(i) => write!(f, "cannot find issue HEAD for {i}"),
            Self::CannotSetReference(r) => write!(f, "cannot update or create reference '{r}'"),
            Self::NoTreeInitFound(i) => write!(f, "cannot find any tree init for {i}"),
            Self::OidFormatError(n) => write!(f, "malformed OID: {n}"),
            Self::MalFormedHeadReference(n) => write!(f, "malformed head refernece: {n}"),
            Self::TrailerFormatError(t) => write!(f, "malformed trailer: {t}"),
            Self::MalformedMessage => write!(f, "malformed message"),
        }
    }
}


/// [Error](std::error::Error) type specific to a git implementation
///
/// This trait is implemented for [Error](std::error::Error)s we wrap in our own
/// custom [Error]. The trait links that source error type to types we use for
/// representing certain entities with the specific git library in the context
/// of error reporting.
pub trait InnerError: std::error::Error {
    /// Type used for representing Object IDs
    type Oid: Clone + fmt::Debug + fmt::Display;

    /// Type used for representing refs in actual [Error]s
    type RefName: Clone + fmt::Debug + fmt::Display;

    /// Type used by the underlying implementation for references
    type Reference<'r>;

    /// Extract the [Self::RefName] of a given [Self::Reference]
    fn ref_name(reference: &Self::Reference<'_>) -> Self::RefName;
}

impl InnerError for git2::Error {
    type Oid = git2::Oid;
    type RefName = String;
    type Reference<'r> = git2::Reference<'r>;

    fn ref_name(reference: &Self::Reference<'_>) -> Self::RefName {
        reference.name().unwrap_or("invalid!").to_owned()
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use super::*;

    #[derive(Copy, Clone, Debug)]
    pub struct TestError;

    impl InnerError for TestError {
        type Oid = crate::base::tests::TestOid;
        type RefName = String;
        type Reference<'r> = crate::reference::tests::TestRef;

        fn ref_name(reference: &Self::Reference<'_>) -> Self::RefName {
            use crate::reference::Reference;

            reference
                .name()
                .map(ToString::to_string)
                .unwrap_or_default()
        }
    }

    impl std::error::Error for TestError {}

    impl fmt::Display for TestError {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            fmt::Display::fmt("TEST ERROR", f)
        }
    }
}
